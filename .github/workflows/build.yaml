name: Build and Analyze

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
  workflow_dispatch: # enables manual trigger

permissions:
  issues: write         # Required for create-or-update-comment
  pull-requests: write  # Required for SonarQube PR decoration and create-or-update-comment
  contents: read        # Required for actions/checkout
  # Optional: Needed if SonarQube needs to check security hotspots. Add if required.
  security-events: read

jobs:
  frontend-tests:
    if: github.event.pull_request.state == 'open' && github.event.pull_request.draft == false
    runs-on: ubuntu-latest
    outputs: # Define output for artifact name
      artifact_name: frontend-test-results-${{ github.run_id }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4 # Use v4

      - name: Run Frontend Tests and Generate Coverage
       # Assuming this action generates coverage reports (e.g., lcov.info)
       # inside the specified output path (default './coverage')
        uses: ./.github/actions/run-frontend-tests
        id: run_tests
        with:
         working-directory: "."
         codecov-token: ${{ secrets.CODECOV_TOKEN }}
         node-env: 'test'
         # Ensure this action outputs coverage to a predictable path, e.g., ./coverage/lcov.info

      - name: Upload Frontend Test Coverage Artifact
        uses: actions/upload-artifact@v4
        with:
         name: ${{ steps.run_tests.outputs.artifact_name || format('frontend-test-results-{0}', github.run_id) }} # Use output or fallback
         path: ./coverage # Adjust if your action outputs coverage elsewhere

  sonarqube-analysis:
    if: github.event.pull_request.state == 'open' && github.event.pull_request.draft == false
    needs: [frontend-tests]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Required for SonarQube PR analysis

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: 21 # SonarScanner supports LTS versions like 21
          distribution: "temurin"

      # - name: Download Frontend Test Results
      #   uses: actions/download-artifact@v4
      #   with:
      #     name: ${{ needs.frontend-tests.outputs.artifact_name }} # Use output from needs context
      #     path: ./coverage # Download to the expected path

      - name: Cache SonarQube packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar
          key: ${{ runner.os }}-sonar-${{ hashFiles('**/pom.xml', '**/build.gradle', '**/package-lock.json', '**/yarn.lock') }} # Optional: Make key more specific
          restore-keys: |
            ${{ runner.os }}-sonar-

      - name: Install jq (for parsing results)
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v5 # Use official action v5+
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Pass token for PR decoration
        with:
          projectBaseDir: . # Optional: default is .
          args: >
            -Dsonar.projectKey=StudyConnect-frontend
            -Dsonar.sources=src/app/
            -Dsonar.tests=src/__tests__ # Adjust if tests are in a specific dir
            -Dsonar.exclusions=**/node_modules/**,**/dist/**,**/build/**,**/coverage/**,**/*.test.js,**/*.spec.js,**/*.test.ts,**/*.spec.ts,**/*.test.tsx,**/*.spec.tsx
            -Dsonar.javascript.lcov.reportPaths=./coverage/lcov.info # IMPORTANT: Point to the LCOV file
            # Add other parameters if needed, e.g., exclusions

      - name: Wait for SonarQube Analysis Task Completion
        id: wait_for_sonar_task
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: |
          # --- Configuration ---
          TASK_REPORT_FILE=".scannerwork/report-task.txt"
          # Max time to wait in seconds (e.g., 10 minutes)
          TOTAL_TIMEOUT_SEC=600
          # Time to wait between polling attempts in seconds
          POLL_INTERVAL_SEC=10

          # --- Script ---
          echo "Waiting for SonarQube analysis task to complete..."

          if [ ! -f "$TASK_REPORT_FILE" ]; then
            echo "::error::Task report file '$TASK_REPORT_FILE' not found. Was the SonarQube Scan successful?"
            exit 1
          fi

          # Extract Task ID and Analysis ID (optional, but useful for logging)
          TASK_ID=$(grep 'ceTaskId=' "$TASK_REPORT_FILE" | cut -d= -f2)
          ANALYSIS_ID=$(grep 'analysisId=' "$TASK_REPORT_FILE" | cut -d= -f2) # Might not always be present

          if [ -z "$TASK_ID" ]; then
            echo "::error::Could not extract Task ID (ceTaskId) from '$TASK_REPORT_FILE'."
            cat "$TASK_REPORT_FILE" # Print file content for debugging
            exit 1
          fi

          echo "Found SonarQube Task ID: $TASK_ID"
          if [ -n "$ANALYSIS_ID" ]; then
            echo "Found SonarQube Analysis ID: $ANALYSIS_ID"
          fi

          TASK_URL="$SONAR_HOST_URL/api/ce/task?id=$TASK_ID"
          echo "Polling URL: $TASK_URL"

          start_time=$(date +%s)
          while true; do
            current_time=$(date +%s)
            elapsed_time=$((current_time - start_time))

            if [ "$elapsed_time" -ge "$TOTAL_TIMEOUT_SEC" ]; then
              echo "::error::Timeout waiting for SonarQube task $TASK_ID to complete after $TOTAL_TIMEOUT_SEC seconds."
              exit 1
            fi

            echo "Checking task status (attempt $((elapsed_time / POLL_INTERVAL_SEC + 1)))..."
            # Use --fail to make curl exit non-zero on server errors (4xx, 5xx)
            # Use -s for silent mode (no progress meter)
            # Use -u for authentication
            response=$(curl -s -u "$SONAR_TOKEN:" --fail "$TASK_URL")
            exit_code=$?

            if [ $exit_code -ne 0 ]; then
                echo "::warning::curl command failed with exit code $exit_code attempting to fetch task status. Retrying..."
                # Optionally add more robust error handling here (e.g., retry limit for curl failures)
                sleep "$POLL_INTERVAL_SEC"
                continue # Retry the loop
            fi

            # Use jq to safely parse the JSON and extract the status
            status=$(echo "$response" | jq -r '.task.status')

            if [ "$status" == "null" ] || [ -z "$status" ]; then
                echo "::warning::Could not extract task status from API response. Raw response:"
                echo "$response"
                echo "Retrying..."
                sleep "$POLL_INTERVAL_SEC"
                continue # Retry the loop
            fi

            echo "Current task status: $status"

            case "$status" in
              SUCCESS)
                echo "SonarQube analysis task $TASK_ID completed successfully."
                exit 0 # Success!
                ;;
              FAILED|CANCELED)
                echo "::error::SonarQube analysis task $TASK_ID failed or was canceled (Status: $status)."
                # Optionally fetch component details for more info if needed
                # component_url="$SONAR_HOST_URL/api/ce/component?componentId=$(echo "$response" | jq -r '.task.componentId')"
                # component_details=$(curl -s -u "$SONAR_TOKEN:" --fail "$component_url")
                # echo "::error::Component Details: $component_details"
                exit 1 # Failure!
                ;;
              PENDING|IN_PROGRESS)
                echo "Analysis is $status. Waiting ${POLL_INTERVAL_SEC}s..."
                sleep "$POLL_INTERVAL_SEC"
                ;;
              *)
                echo "::warning::Unknown task status '$status' received. Treating as 'in progress'."
                sleep "$POLL_INTERVAL_SEC"
                ;;
            esac
          done

      - name: Fetch SonarQube Analysis Results
        id: fetch_sonar_results
        run: |
          project_key="StudyConnect-frontend"
          sonar_host="${{ secrets.SONAR_HOST_URL }}"
          sonar_token="${{ secrets.SONAR_TOKEN }}"

          echo "Fetching Quality Gate status from: $sonar_host/api/qualitygates/project_status?projectKey=$project_key"

          # Fetch SonarQube analysis result
          # Use --fail to make curl exit with non-zero status on HTTP errors (like 401 Unauthorized)
          analysis_result=$(curl -s -u "$sonar_token:" --fail "$sonar_host/api/qualitygates/project_status?projectKey=$project_key")

          if [ -z "$analysis_result" ]; then
            echo "::error::Failed to fetch SonarQube analysis results. Response was empty."
            exit 1
          fi
          echo "Raw analysis result: $analysis_result"

          # Extract Quality Gate Status
          quality_gate_status=$(echo "$analysis_result" | jq -r '.projectStatus.status')
          if [ "$quality_gate_status" == "null" ] || [ -z "$quality_gate_status" ]; then
             echo "::error::Could not extract Quality Gate status from SonarQube response."
             echo "Response JSON:"
             echo "$analysis_result"
             exit 1
          fi

          # Extract individual conditions (e.g., coverage, bugs, vulnerabilities, etc.)
          # Format conditions nicely
          conditions=$(echo "$analysis_result" | jq -r '.projectStatus.conditions | map("- \(.metricKey) (\(.status)): \(.actualValue // "N/A") (required \(.errorThreshold // "-"))") | join("\n")')

          # Store extracted values in GitHub environment
          echo "Quality Gate Status: $quality_gate_status"
          echo "quality_gate_status=$quality_gate_status" >> "$GITHUB_ENV"
          echo "conditions<<EOF" >> "$GITHUB_ENV"
          echo "$conditions" >> "$GITHUB_ENV"
          echo "EOF" >> "$GITHUB_ENV"
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}


      - name: Post Comment on PR
        # Only run for pull request events
        if: github.event_name == 'pull_request'
        uses: peter-evans/create-or-update-comment@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            **SonarQube Analysis Results**

            *   **Quality Gate Status:** `${{ env.quality_gate_status }}`

            *   **Conditions:**
                ${{ env.conditions }}

            [View Full Report on SonarQube](${{ secrets.SONAR_HOST_URL }}/dashboard?id=StudyConnect-frontend&pullRequest=${{ github.event.pull_request.number }})

      # Not failing the job for now, but you can uncomment this to enforce Quality Gate
      #- name: Check Quality Gate Status
        # Fail the job if Quality Gate is not OK
        #if: env.quality_gate_status != 'OK' && env.quality_gate_status != 'NONE' # NONE means no Quality Gate defined
        # run: |
          #echo "::error::SonarQube Quality Gate status is ${{ env.quality_gate_status }}. Failing the workflow."
          #exit 1